name: Publish Stable Package

on:
  push:
    tags:
      # Only match stable version tags (no beta, alpha, rc, or pre-release)
      - "v[0-9]+.[0-9]+.[0-9]+"  # Matches v1.0.0, v2.1.3, etc.
      - "*@[0-9]+.[0-9]+.[0-9]+"  # Matches package-name@1.0.0, package-name@2.1.3, etc.
      # Exclude any tags with pre-release identifiers
      - "!v*-*"  # Excludes v1.0.0-beta, v1.0.0-alpha, etc.
      - "!*@*-*"  # Excludes package-name@1.0.0-beta, package-name@1.0.0-alpha, etc.
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to publish (leave empty for all)'
        required: false
        type: string
        default: ''
      skip_version_check:
        description: 'Skip pre-release version check (use with caution)'
        required: false
        type: boolean
        default: false
      dry_run:
        description: 'Run in dry-run mode (no actual publishing)'
        required: false
        type: boolean
        default: false

jobs:
  validate-version:
    # prevents this action from running on forks
    if: github.repository == 'mi-examples/pp-dev-js'
    runs-on: ubuntu-latest
    outputs:
      is_stable: ${{ steps.check-version.outputs.is_stable }}
      version: ${{ steps.check-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if version is stable
        id: check-version
        run: |
          # Extract version from tag
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${GITHUB_REF_NAME}"
            echo "Checking tag: $TAG_NAME"
            
            # Handle different tag formats
            if [[ "$TAG_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Format: v1.2.3
              VERSION="${TAG_NAME#v}"
              echo "Detected v-prefix format: $VERSION"
            elif [[ "$TAG_NAME" =~ ^[^@]+@[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # Format: package@1.2.3
              PACKAGE_NAME="${TAG_NAME%@*}"
              VERSION="${TAG_NAME#*@}"
              echo "Detected package@version format: $PACKAGE_NAME@$VERSION"
              
              # Validate that the package exists
              if [[ ! -d "packages/$PACKAGE_NAME" ]]; then
                echo "❌ Error: Package '$PACKAGE_NAME' not found in packages directory"
                echo "Available packages:"
                ls -la packages/ 2>/dev/null | grep "^d" | awk '{print "  - " $NF}' || echo "  No packages found"
                echo "is_stable=false" >> $GITHUB_OUTPUT
                echo "version=$VERSION" >> $GITHUB_OUTPUT
                exit 1
              fi
              echo "✅ Package '$PACKAGE_NAME' exists in packages directory"
            else
              # Try to extract version by removing 'v' prefix as fallback
              VERSION="${TAG_NAME#v}"
              echo "Using fallback extraction: $VERSION"
            fi
            
            # Check if this is a stable version (no pre-release identifiers)
            if [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "✅ Stable version detected: $VERSION"
              echo "is_stable=true" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
            elif [[ "$VERSION" =~ (beta|alpha|rc|pre|preview|dev|canary) ]]; then
              echo "❌ Pre-release version detected: $VERSION"
              echo "This workflow only publishes stable versions."
              echo "Use the beta-release workflow for pre-release versions."
              echo "is_stable=false" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              exit 1
            else
              echo "⚠️ Version format not recognized: $VERSION"
              echo "Expected format: X.Y.Z (e.g., 1.0.0) or package@X.Y.Z (e.g., create-pp-dev@1.2.3)"
              echo "is_stable=false" >> $GITHUB_OUTPUT
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              exit 1
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual trigger, check if skip_version_check is enabled
            if [[ "${{ github.event.inputs.skip_version_check }}" == "true" ]]; then
              echo "⚠️ Version check skipped (manual override)"
              echo "is_stable=true" >> $GITHUB_OUTPUT
              echo "version=manual" >> $GITHUB_OUTPUT
            else
              echo "is_stable=true" >> $GITHUB_OUTPUT
              echo "version=manual" >> $GITHUB_OUTPUT
            fi
          fi

  detect-packages:
    needs: validate-version
    if: needs.validate-version.outputs.is_stable == 'true'
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.set-packages.outputs.packages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get packages to publish
        id: set-packages
        run: |
          packages="[]" # Default to empty array
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.package }}" ]]; then
            # For manual trigger with specified package
            if [[ -d "packages/${{ github.event.inputs.package }}" ]]; then
              packages="[\"${{ github.event.inputs.package }}\"]"
            else
              echo "Error: Package '${{ github.event.inputs.package }}' not found in packages directory"
              exit 1
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual trigger without specified package, use all packages
            if [[ -d "packages" ]]; then
              all_packages=($(ls -d packages/*/ 2>/dev/null | cut -d'/' -f2 | grep -v '^$'))
              if [[ ${#all_packages[@]} -gt 0 ]]; then
                packages=$(printf '"%s",' "${all_packages[@]}" | sed 's/,$//' | sed 's/^/\[/; s/$/\]/')
              fi
            fi
          else
            # For tags, determine package name based on tag format
            if [[ $GITHUB_REF_NAME =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              # This is a stable version tag
              packages='["pp-dev"]' # JSON array for stable v* tags
            else
              # Extract package name from tags like package-name@version
              pkg_name=${GITHUB_REF_NAME%@*}
              # If pkg_name is not empty and package exists, format as JSON array
              if [[ -n "$pkg_name" && -d "packages/$pkg_name" ]]; then
                  packages="[\"$pkg_name\"]" # JSON array for specific package tag
              fi
            fi
          fi
          
          echo "packages=$packages" >> $GITHUB_OUTPUT
          echo "Generated packages output: $packages"
          echo "Debug - packages output format: '$packages'"
          echo "Debug - JSON validation: $(echo "$packages" | jq . 2>/dev/null || echo "INVALID JSON")"
          
          # Validate JSON output
          if ! echo "$packages" | jq . >/dev/null 2>&1; then
            echo "Error: Invalid JSON generated for packages"
            exit 1
          fi
          
          # Always exit successfully - packages array is valid
          echo "✅ Package detection completed successfully"

  # Publish pp-dev first (core package)
  publish-pp-dev:
    needs: [validate-version, detect-packages]
    if: ${{ contains(fromJSON(needs.detect-packages.outputs.packages), 'pp-dev') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    environment: Release
    defaults:
      run:
        working-directory: packages/pp-dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          cache: 'npm'

      - name: Validate package version is stable
        run: |
          # Get version from package.json
          pkg_version=$(node -p "require('./package.json').version")
          echo "Package version: $pkg_version"
          
          # Check if version contains pre-release identifiers
          if [[ "$pkg_version" =~ (beta|alpha|rc|pre|preview|dev|canary) ]]; then
            echo "❌ Error: Package version contains pre-release identifier: $pkg_version"
            echo "Please update package.json to contain a stable version (X.Y.Z format)"
            exit 1
          fi
          
          # Verify it's a proper semantic version
          if [[ ! "$pkg_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Error: Package version is not in stable semantic version format: $pkg_version"
            echo "Expected format: X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi
          
          echo "✅ Package version is stable: $pkg_version"

      - name: Install dependencies
        run: npm ci

      - name: Build package
        run: npm run build

      - name: Verify build output
        run: |
          # Check if dist directory exists and has content
          if [[ ! -d "dist" ]]; then
            echo "Error: Build output directory 'dist' not found"
            exit 1
          fi
          
          # Check if package.json exists in dist (for most packages)
          if [[ -f "package.json" ]] && [[ ! -f "dist/package.json" ]]; then
            echo "Warning: No package.json found in dist directory"
          fi
          
          echo "Build verification passed"

      - name: Publish Package (Stable Only)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          NPM_TOKEN: ${{ secrets.npm_token }}
        run: |
          echo "Publishing stable package from tag: $GITHUB_REF_NAME"
          
          # Double-check we're not publishing a beta version
          pkg_version=$(node -p "require('./package.json').version")
          if [[ "$pkg_version" =~ (beta|alpha|rc|pre) ]]; then
            echo "❌ Aborting: Attempting to publish pre-release version: $pkg_version"
            exit 1
          fi
          
          # Check if dry-run mode is enabled
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "🔍 DRY-RUN MODE: Simulating package publication..."
            npm publish --access public --tag latest --dry-run
            echo "✅ Dry-run completed successfully - no actual publication occurred"
          else
            # Publish with 'latest' tag (default for stable versions)
            npm publish --access public --tag latest
          fi

      - name: Dry-run mode indicator
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🔍 DRY-RUN MODE ENABLED"
          echo "=========================================="
          echo "✅ Package would have been published to npm"
          echo "✅ All validation steps completed successfully"
          echo "✅ No actual publication occurred"
          echo "=========================================="

      - name: Verify publication
        if: github.event.inputs.dry_run != 'true'
        run: |
          # Get package name from package.json
          pkg_name=$(node -p "require('./package.json').name")
          pkg_version=$(node -p "require('./package.json').version")
          
          echo "Verifying publication of $pkg_name@$pkg_version"
          
          # Retry logic with exponential backoff
          max_retries=3
          retry_count=0
          base_delay=10
          
          while [ $retry_count -lt $max_retries ]; do
            echo "Attempt $((retry_count + 1))/$max_retries"
            
            # Wait with exponential backoff
            delay=$((base_delay * (2 ** retry_count)))
            echo "Waiting $delay seconds for npm registry to update..."
            sleep $delay
            
            # Check if package is available on npm
            if npm view "$pkg_name@$pkg_version" version >/dev/null 2>&1; then
              echo "✅ Successfully published stable version $pkg_name@$pkg_version"
              exit 0
            else
              echo "❌ Attempt $((retry_count + 1)) failed to verify publication of $pkg_name@$pkg_version"
              retry_count=$((retry_count + 1))
            fi
          done
          
          echo "❌ Failed to verify publication after $max_retries attempts"
          exit 1

  # Publish create-pp-dev second (depends on pp-dev)
  publish-create-pp-dev:
    needs: [validate-version, detect-packages, publish-pp-dev]
    if: ${{ contains(fromJSON(needs.detect-packages.outputs.packages), 'create-pp-dev') }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    environment: Release
    defaults:
      run:
        working-directory: packages/create-pp-dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          cache: 'npm'

      - name: Validate package version is stable
        run: |
          # Get version from package.json
          pkg_version=$(node -p "require('./package.json').version")
          echo "Package version: $pkg_version"
          
          # Check if version contains pre-release identifiers
          if [[ "$pkg_version" =~ (beta|alpha|rc|pre|preview|dev|canary) ]]; then
            echo "❌ Error: Package version contains pre-release identifier: $pkg_version"
            echo "Please update package.json to contain a stable version (X.Y.Z format)"
            exit 1
          fi
          
          # Verify it's a proper semantic version
          if [[ ! "$pkg_version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Error: Package version is not in stable semantic version format: $pkg_version"
            echo "Expected format: X.Y.Z (e.g., 1.0.0)"
            exit 1
          fi
          
          echo "✅ Package version is stable: $pkg_version"

      - name: Install dependencies
        run: npm i

      - name: Build package
        run: npm run build

      - name: Verify build output
        run: |
          # Check if dist directory exists and has content
          if [[ ! -d "dist" ]]; then
            echo "Error: Build output directory 'dist' not found"
            exit 1
          fi
          
          # Check if package.json exists in dist (for most packages)
          if [[ -f "package.json" ]] && [[ ! -f "dist/package.json" ]]; then
            echo "Warning: No package.json found in dist directory"
          fi
          
          echo "Build verification passed"

      - name: Verify pp-dev dependency
        run: |
          echo "Verifying pp-dev release exists..."
          git fetch --tags origin
          
          if ! git tag --list | grep -q "^v[0-9]"; then
            echo "Error: pp-dev tag not found. Cannot proceed with create-pp-dev publish."
            exit 1
          fi
          echo "pp-dev dependency verified successfully"

      - name: Update pp-dev dependency to latest stable version
        run: |
          echo "Updating pp-dev dependency to latest stable version..."
          
          # Get the latest stable pp-dev version from git tags (excluding beta versions)
          latest_pp_dev_version=$(git tag --list "v*" | grep -v "beta\|alpha\|rc\|pre" | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | sort -V | tail -n1 | sed 's/^v//')
          echo "Latest stable pp-dev version: $latest_pp_dev_version"
          
          if [[ -z "$latest_pp_dev_version" ]]; then
            echo "Error: Could not determine latest stable pp-dev version"
            exit 1
          fi
          
          # Update package.json dependency
          npm pkg set "dependencies.@metricinsights/pp-dev" "^$latest_pp_dev_version"
          
          # Update template package.json files
          find . -name "package.json" -path "*/template-*/*" -exec sed -i "s/\"@metricinsights\/pp-dev\": \"[^\"]*\"/\"@metricinsights\/pp-dev\": \"^$latest_pp_dev_version\"/g" {} \;
          
          # Update any other version references in template files
          find . -path "*/template-*/*" -type f -name "*.json" -exec sed -i "s/\"@metricinsights\/pp-dev\": \"[^\"]*\"/\"@metricinsights\/pp-dev\": \"^$latest_pp_dev_version\"/g" {} \;
          
          echo "Updated pp-dev dependency to stable version ^$latest_pp_dev_version"
          
          # Show the changes
          echo "Updated package.json:"
          grep "@metricinsights/pp-dev" package.json
          
          echo "Updated template files:"
          find . -path "*/template-*/*" -name "package.json" -exec grep -l "@metricinsights/pp-dev" {} \;

      - name: Commit dependency updates
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Committing dependency updates..."
            git add .
            git commit -m "chore(deps): update pp-dev dependency to latest stable version"
            git push origin HEAD:main
          else
            echo "No dependency updates to commit"
          fi

      - name: Publish Package (Stable Only)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.npm_token }}
          NPM_TOKEN: ${{ secrets.npm_token }}
        run: |
          echo "Publishing stable package from tag: $GITHUB_REF_NAME"
          
          # Double-check we're not publishing a beta version
          pkg_version=$(node -p "require('./package.json').version")
          if [[ "$pkg_version" =~ (beta|alpha|rc|pre) ]]; then
            echo "❌ Aborting: Attempting to publish pre-release version: $pkg_version"
            exit 1
          fi
          
          # Check if dry-run mode is enabled
          if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "🔍 DRY-RUN MODE: Simulating package publication..."
            npm publish --access public --tag latest --dry-run
            echo "✅ Dry-run completed successfully - no actual publication occurred"
          else
            # Publish with 'latest' tag (default for stable versions)
            npm publish --access public --tag latest
          fi

      - name: Dry-run mode indicator
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "🔍 DRY-RUN MODE ENABLED"
          echo "=========================================="
          echo "✅ Package would have been published to npm"
          echo "✅ All validation steps completed successfully"
          echo "✅ No actual publication occurred"
          echo "=========================================="

      - name: Verify publication
        if: github.event.inputs.dry_run != 'true'
        run: |
          # Get package name from package.json
          pkg_name=$(node -p "require('./package.json').name")
          pkg_version=$(node -p "require('./package.json').version")
          
          echo "Verifying publication of $pkg_name@$pkg_version"
          
          # Retry logic with exponential backoff
          max_retries=3
          retry_count=0
          base_delay=10
          
          while [ $retry_count -lt $max_retries ]; do
            echo "Attempt $((retry_count + 1))/$max_retries"
            
            # Wait with exponential backoff
            delay=$((base_delay * (2 ** retry_count)))
            echo "Waiting $delay seconds for npm registry to update..."
            sleep $delay
            
            # Check if package is available on npm
            if npm view "$pkg_name@$pkg_version" version >/dev/null 2>&1; then
              echo "✅ Successfully published stable version $pkg_name@$pkg_version"
              exit 0
            else
              echo "❌ Attempt $((retry_count + 1)) failed to verify publication of $pkg_name@$pkg_version"
              retry_count=$((retry_count + 1))
            fi
          done
          
          echo "❌ Failed to verify publication after $max_retries attempts"
          exit 1

  create-release:
    needs: [validate-version, detect-packages, publish-pp-dev]
    if: needs.validate-version.outputs.is_stable == 'true' && github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create GitHub Release
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.validate-version.outputs.version }}';
            const tagName = context.ref.replace('refs/tags/', '');
            
            // Generate release notes (you can customize this)
            const releaseNotes = `## 🎉 Stable Release ${version}
            
            This is a stable release of the pp-dev-js packages.
            
            ### 📦 Published Packages
            - @metricinsights/pp-dev@${version}
            - @metricinsights/create-pp-dev (if applicable)
            
            ### 📋 Installation
            \`\`\`bash
            npm install @metricinsights/pp-dev@${version}
            # or
            npm install @metricinsights/pp-dev@latest
            \`\`\`
            
            ### 🔗 Links
            - [npm package](https://www.npmjs.com/package/@metricinsights/pp-dev)
            - [Documentation](https://github.com/mi-examples/pp-dev-js#readme)
            `;
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tagName,
              name: `Release ${version}`,
              body: releaseNotes,
              draft: false,
              prerelease: false
            });
            
            console.log(`Created release ${release.data.html_url}`);
