---
description: Generate PR messages in markdown format for easy copy-paste to GitHub
globs: *.md,*.mdc
---

# PR Message Generation Rules

When generating PR messages, always follow these formatting guidelines for optimal GitHub compatibility:

## Required Format Structure

### 1. Title Format
- Use clear, descriptive titles with emoji prefixes when appropriate
- Follow conventional commit format: `type(scope): description`
- Keep titles under 72 characters
- Use title case for the main description

### 2. Markdown Structure
```markdown
## 🚀 [Title with Emoji]

### 📋 Summary
Brief 2-3 sentence overview of the changes

### ✨ Key Features & Improvements
- **Feature Name** - Description
- **Another Feature** - Description

### 📊 Impact Summary
- **X files changed** with specific improvements
- **Y insertions, Z deletions** - Net impact
- **Performance/UX improvements** - Specific benefits

### 🔄 Breaking Changes
- List any breaking changes or "None - All changes maintain backward compatibility"

### 🧪 Testing & Quality Assurance
- Testing approach and coverage
- Quality assurance measures

### 📝 Included Commits
- `commit-hash commit-message`
- `commit-hash commit-message`

### 🏷️ Release Notes
- High-level benefits and improvements
- What this release enables

### ✅ Ready for [Target]
- Merge status and readiness
- Any additional notes

---

**Merge Request:** `source-branch` → `target-branch`  
**Release Tag:** `version-tag` (if applicable)  
**Status:** Ready for Review ✅
```

## Emoji Guidelines
- 🚀 for new features
- 🔧 for fixes/improvements
- ⚡ for performance optimizations
- 🔐 for security/auth features
- 🧹 for cleanup/maintenance
- 📊 for metrics/analytics
- 🧪 for testing
- 🔄 for breaking changes
- ✅ for completion/readiness

## Content Requirements
- Always include a clear summary
- List specific technical improvements
- Mention file counts and code changes
- Include commit references
- Specify breaking changes or compatibility
- Use bullet points for readability
- Keep language professional but engaging

## Temporary File Creation
When generating comprehensive PR messages with extensive content:
- **Create temporary markdown files** for complex PR descriptions
- Use descriptive filenames like `pr-description-{branch-name}.md` or `pr-merge-{source}-to-{target}.md`
- Store temporary files in the project root or a dedicated `temp/` directory
- Include all detailed information that may not fit in chat responses
- Ensure temporary files are properly formatted and complete
- Clean up temporary files after the PR is created (optional)

### When to Use Temporary Files
- **Large PRs** with many commits and extensive changes
- **Release PRs** merging develop to main with comprehensive release notes
- **Complex merges** involving multiple feature branches
- **Detailed technical documentation** that exceeds chat response limits
- **Multi-package changes** requiring extensive documentation
- **Breaking changes** that need detailed migration guides

## GitHub Compatibility
- Use proper markdown headers (##, ###)
- Include horizontal rules (---) for separation
- Use bold text (**text**) for emphasis
- Use code blocks for technical details
- Ensure proper line breaks for readability
- Use checkboxes (✅) for status indicators

## Example Template
```markdown
## 🚀 feat(pp-dev): enhance authentication system and optimize core functionality

### 📋 Summary
This PR introduces significant improvements to the pp-dev package, focusing on authentication management, middleware optimization, and overall code quality enhancements.

### ✨ Key Features & Improvements
- **Global Authentication Provider** - Centralized auth state management
- **Middleware Optimizations** - Enhanced performance and reliability
- **Plugin Refactoring** - Streamlined implementation

### 📊 Impact Summary
- **13 files changed** with focused improvements
- **784 insertions, 316 deletions** - Net improvement in code quality
- **Enhanced Developer Experience** - Better error handling and debugging

### 🔄 Breaking Changes
None - All changes maintain backward compatibility.

### 🧪 Testing & Quality Assurance
- Updated test configurations ensure compatibility
- All existing functionality preserved
- Comprehensive error handling included

### 📝 Included Commits
- `2b1e00d feat(auth): add global authentication provider`
- `47c4033 refactor(middleware): improve middleware implementations`
- `9b43074 refactor(plugin): optimize plugin implementation`

### 🏷️ Release Notes
This release represents a significant step forward in the pp-dev package architecture, providing a robust foundation for future authentication features while maintaining backward compatibility.

### ✅ Ready for Production
This merge brings the latest stable development changes to the main branch, ready for the next production release cycle.

---

**Merge Request:** `origin/develop` → `origin/main`  
**Release Tag:** v0.12.0-beta.1  
**Status:** Ready for Review ✅
```

## Quality Checklist
- [ ] Title is clear and descriptive
- [ ] Summary provides good overview
- [ ] Key features are well-organized
- [ ] Impact metrics are included
- [ ] Breaking changes are addressed
- [ ] Testing information is provided
- [ ] Commits are referenced
- [ ] Release notes are meaningful
- [ ] Status is clearly indicated
- [ ] Formatting is GitHub-compatible
- [ ] Temporary file created if content is extensive
- [ ] All information included (not truncated in chat)
- [ ] Temporary file properly named and located
- [ ] Content is complete and ready for copy-paste